{"version":3,"sources":["api/fetchWeather.js","speechReg.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","clear","makeComputerToSpeak","message","utterance","window","SpeechSynthesisUtterance","webkitSpeechSynthesisUtterance","volume","rate","pitch","text","name","Math","round","main","temp","humidity","feels_like","weather","description","console","log","speechSynthesis","webkitspeechSynthesis","cancel","speak","App","searchWord","React","useRef","useState","setWeather","search","e","current","value","response","gettingObservedText","clearResult","WeatherDisplay","cod","className","sys","country","src","icon","alt","type","placeholder","ref","onClick","observedText","root","document","getElementById","recognition","SpeechRecognition","webkitSpeechRecognition","start","onstart","style","backgroundImage","onresult","resultIndex","transcript","results","background","some","includes","toLowerCase","speechObserving","ReactDOM","render"],"mappings":"wQAKaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,sDCHnBC,EAAQ,CAAC,SAAU,SAAU,SA4BtBC,EAAsB,SAACC,GAElC,IAGMC,EAAY,IAFhBC,OAAOC,0BAA4BD,OAAOE,gCAI5CH,EAAUI,OAAS,EACnBJ,EAAUK,KAAO,EACjBL,EAAUM,MAAQ,EAElBN,EAAUO,KAAOR,EAAQA,QACrBA,EAAQA,QADK,uBAEGA,EAAQS,KAFX,iBAEwBC,KAAKC,MACxCX,EAAQY,KAAKC,MAHF,wCAIoBb,EAAQY,KAAKE,SAJjC,2BAKXd,EAAQY,KAAKG,WALF,mCAMcf,EAAQgB,QAAQ,GAAGC,aAClDC,QAAQC,IAAIlB,EAAUO,MAEtB,IAAMY,EACJlB,OAAOkB,iBAAmBlB,OAAOmB,sBACnCD,EAAgBE,SAChBF,EAAgBG,MAAMtB,ICyCTuB,G,MAxFH,WACV,IAAMC,EAAaC,IAAMC,SADT,EAEcC,mBAAS,IAFvB,mBAETZ,EAFS,KAEAa,EAFA,KAIVC,EAAM,uCAAG,WAAOC,GAAP,iBAAAzC,EAAA,+EAGQF,EAAaqC,EAAWO,QAAQC,OAHxC,OAGLpC,EAHK,OAIXqC,EAAWrC,EAJA,gDAMXqC,EAAS,KAAMA,SAASrC,KANb,QAQbgC,EAAWK,GACXnC,EAAoBmC,GATP,yDAAH,sDAYNC,EAAsB,SAACJ,GAC3BN,EAAWO,QAAQC,MAAQF,EAC3BD,KAMIM,EAAc,WAClBX,EAAWO,QAAQC,MAAQ,GAC3BJ,EAAW,KAEPQ,EAAiB,kBACrBrB,EAAQsB,IAAM,IACZ,yBAAKC,UAAU,SAASvB,EAAQhB,SAEhC,yBAAKuC,UAAU,QACb,wBAAIA,UAAU,aACZ,8BAAOvB,EAAQP,MACf,6BAAMO,EAAQwB,IAAIC,UAEpB,yBAAKF,UAAU,aACZ7B,KAAKC,MAAMK,EAAQJ,KAAKC,MACzB,uCAEF,yBAAK0B,UAAU,QACb,yBACEA,UAAU,YACVG,IAAG,4CAAuC1B,EAAQA,QAAQ,GAAG2B,KAA1D,WACHC,IAAK5B,EAAQA,QAAQ,GAAGC,cAE1B,2BAAID,EAAQA,QAAQ,GAAGC,gBAK/B,OACE,yBAAKsB,UAAU,kBACb,yBAAKA,UAAU,UAAf,yBACA,yBAAKA,UAAU,cACb,2BACEM,KAAK,OACLN,UAAU,SACVO,YAAY,YACZC,IAAKtB,IAEP,2BACEc,UAAU,SACVM,KAAK,SACLG,QAASlB,EACTG,MAAM,UAEPR,EAAWO,SAAWP,EAAWO,QAAQC,OACxC,2BACEM,UAAU,SACVM,KAAK,SACLG,QAASZ,EACTH,MAAM,iBAGV,2BACEM,UAAU,SACVM,KAAK,SACLG,QA3DO,YDtBc,SAACC,EAAcb,GAC5C,IAAMc,EAAOC,SAASC,eAAe,QAK/BC,EAAc,IAFlBnD,OAAOoD,mBAAqBpD,OAAOqD,yBAGrCF,EAAYG,QAEZH,EAAYI,QAAU,WAEpBvC,QAAQC,IAAI,WACZ+B,EAAKQ,MAAMC,gBACT,+DAGJN,EAAYO,SAAW,SAAU7B,GAC/B,IAAM8B,EAAc9B,EAAE8B,YACdC,EAAe/B,EAAEgC,QAAQF,GAAa,GAAtCC,WACR5C,QAAQC,IAAI,OAAQ2C,GACpBZ,EAAKQ,MAAMM,WAAa,UACpBlE,EAAMmE,MAAK,SAACxD,GAAD,OAAUqD,EAAWI,SAASzD,EAAK0D,kBAAiB/B,IAC9Da,EAAaa,ICClBM,CAAgBjC,EAAqBC,IA2D/BH,MAAM,eAGTjB,EAAQsB,KAAO,kBAACD,EAAD,SCpFtBgC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASC,eAAe,W","file":"static/js/main.2e5c5073.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\n\nexport const fetchWeather = async (query) => {\n    const { data } = await axios.get(URL, {\n        params: {\n            q: query,\n            units: 'metric',\n            APPID: API_KEY,\n        }\n    });\n\n    return data;\n}","// SpeechRecognition \n\nconst clear = [\"delete\", \"remove\", \"clear\"];\n\nexport const speechObserving = (observedText, clearResult) => {\n  const root = document.getElementById('root'); //Accessing root id div\n\n  const SpeechRecognition =\n    window.SpeechRecognition || window.webkitSpeechRecognition;\n\n  const recognition = new SpeechRecognition();\n  recognition.start();\n\n  recognition.onstart = function () {\n    // Once user starts to speak, soundwave gif should be display\n    console.log('Started');\n    root.style.backgroundImage =\n      'url(https://media.giphy.com/media/9ryCWhW8nmQms/source.gif)';\n  };\n\n  recognition.onresult = function (e) {\n    const resultIndex = e.resultIndex;\n    const { transcript } = e.results[resultIndex][0];\n    console.log('Told', transcript);\n    root.style.background = '#a8b8d6';\n    if (clear.some((name) => transcript.includes(name.toLowerCase()))) clearResult();\n    else observedText(transcript);\n  };\n};\n\nexport const makeComputerToSpeak = (message) => {\n  // making text for computer to express....\n  const SpeechSynthesisUtterance =\n    window.SpeechSynthesisUtterance || window.webkitSpeechSynthesisUtterance;\n\n  const utterance = new SpeechSynthesisUtterance();\n\n  utterance.volume = 1; // max\n  utterance.rate = 1;\n  utterance.pitch = 1;\n\n  utterance.text = message.message\n    ? message.message\n    : `Currently in ${message.name}, its ${Math.round(\n        message.main.temp,\n      )} celsius. Due to humidity of ${message.main.humidity}, it feels like ${\n        message.main.feels_like\n      } celsius. There will be ${message.weather[0].description}`;\n  console.log(utterance.text);\n  // Telling computer to speak\n  const speechSynthesis =\n    window.speechSynthesis || window.webkitspeechSynthesis;\n  speechSynthesis.cancel();\n  speechSynthesis.speak(utterance);\n};\n","import React, { useState } from 'react';\n\nimport { fetchWeather } from './api/fetchWeather';\nimport { speechObserving, makeComputerToSpeak } from './speechReg';\nimport './App.css';\n\nconst App = () => {\n  const searchWord = React.useRef();\n  const [weather, setWeather] = useState({});\n\n  const search = async (e) => {\n    let response;\n    try {\n      const data = await fetchWeather(searchWord.current.value);\n      response = data;\n    } catch (error) {\n      response=error.response.data;\n    }\n    setWeather(response);\n    makeComputerToSpeak(response);\n  };\n\n  const gettingObservedText = (e) => {\n    searchWord.current.value = e;\n    search();\n  };\n  const speech = () => {\n    speechObserving(gettingObservedText, clearResult);\n  };\n\n  const clearResult = () => {\n    searchWord.current.value = '';\n    setWeather({});\n  };\n  const WeatherDisplay = () =>\n    weather.cod > 400 ? (\n      <div className=\"error\">{weather.message}</div>\n    ) : (\n      <div className=\"city\">\n        <h2 className=\"city-name\">\n          <span>{weather.name}</span>\n          <sup>{weather.sys.country}</sup>\n        </h2>\n        <div className=\"city-temp\">\n          {Math.round(weather.main.temp)}\n          <sup>&deg;C</sup>\n        </div>\n        <div className=\"info\">\n          <img\n            className=\"city-icon\"\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n            alt={weather.weather[0].description}\n          />\n          <p>{weather.weather[0].description}</p>\n        </div>\n      </div>\n    );\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"header\">Weathe Monitoring App</div>\n      <div className=\"controller\">\n        <input\n          type=\"text\"\n          className=\"search\"\n          placeholder=\"Search...\"\n          ref={searchWord}\n        />\n        <input\n          className=\"button\"\n          type=\"button\"\n          onClick={search}\n          value=\"Check\"\n        />\n        {searchWord.current && searchWord.current.value && (\n          <input\n            className=\"button\"\n            type=\"button\"\n            onClick={clearResult}\n            value=\"Clear Result\"\n          />\n        )}\n        <input\n          className=\"button\"\n          type=\"button\"\n          onClick={speech}\n          value=\"Speak Now\"\n        />\n      </div>\n      {weather.cod && <WeatherDisplay />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}